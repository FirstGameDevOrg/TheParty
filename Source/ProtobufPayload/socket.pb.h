// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: socket.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_socket_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_socket_2eproto

#pragma warning(default: 4668)
#pragma warning(default: 4073)
#pragma warning(default: 4583)
#pragma warning(default: 4582)
#pragma warning(default: 4668)
#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_socket_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_socket_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_socket_2eproto;
namespace pb {
namespace socket {
class DemoLoginVerify;
struct DemoLoginVerifyDefaultTypeInternal;
extern DemoLoginVerifyDefaultTypeInternal _DemoLoginVerify_default_instance_;
class ExternalMessage;
struct ExternalMessageDefaultTypeInternal;
extern ExternalMessageDefaultTypeInternal _ExternalMessage_default_instance_;
class HelloReq;
struct HelloReqDefaultTypeInternal;
extern HelloReqDefaultTypeInternal _HelloReq_default_instance_;
class HelloSpringMsg;
struct HelloSpringMsgDefaultTypeInternal;
extern HelloSpringMsgDefaultTypeInternal _HelloSpringMsg_default_instance_;
class UserInfo;
struct UserInfoDefaultTypeInternal;
extern UserInfoDefaultTypeInternal _UserInfo_default_instance_;
class UserLogin;
struct UserLoginDefaultTypeInternal;
extern UserLoginDefaultTypeInternal _UserLogin_default_instance_;
}  // namespace socket
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::socket::DemoLoginVerify* Arena::CreateMaybeMessage<::pb::socket::DemoLoginVerify>(Arena*);
template<> ::pb::socket::ExternalMessage* Arena::CreateMaybeMessage<::pb::socket::ExternalMessage>(Arena*);
template<> ::pb::socket::HelloReq* Arena::CreateMaybeMessage<::pb::socket::HelloReq>(Arena*);
template<> ::pb::socket::HelloSpringMsg* Arena::CreateMaybeMessage<::pb::socket::HelloSpringMsg>(Arena*);
template<> ::pb::socket::UserInfo* Arena::CreateMaybeMessage<::pb::socket::UserInfo>(Arena*);
template<> ::pb::socket::UserLogin* Arena::CreateMaybeMessage<::pb::socket::UserLogin>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {
namespace socket {

// ===================================================================

class HelloReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.socket.HelloReq) */ {
 public:
  inline HelloReq() : HelloReq(nullptr) {}
  ~HelloReq() override;
  explicit PROTOBUF_CONSTEXPR HelloReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HelloReq(const HelloReq& from);
  HelloReq(HelloReq&& from) noexcept
    : HelloReq() {
    *this = ::std::move(from);
  }

  inline HelloReq& operator=(const HelloReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline HelloReq& operator=(HelloReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HelloReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const HelloReq* internal_default_instance() {
    return reinterpret_cast<const HelloReq*>(
               &_HelloReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HelloReq& a, HelloReq& b) {
    a.Swap(&b);
  }
  inline void Swap(HelloReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HelloReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HelloReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HelloReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HelloReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HelloReq& from) {
    HelloReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HelloReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.socket.HelloReq";
  }
  protected:
  explicit HelloReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:pb.socket.HelloReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_socket_2eproto;
};
// -------------------------------------------------------------------

class UserInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.socket.UserInfo) */ {
 public:
  inline UserInfo() : UserInfo(nullptr) {}
  ~UserInfo() override;
  explicit PROTOBUF_CONSTEXPR UserInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserInfo(const UserInfo& from);
  UserInfo(UserInfo&& from) noexcept
    : UserInfo() {
    *this = ::std::move(from);
  }

  inline UserInfo& operator=(const UserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInfo& operator=(UserInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserInfo* internal_default_instance() {
    return reinterpret_cast<const UserInfo*>(
               &_UserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UserInfo& a, UserInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(UserInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserInfo& from) {
    UserInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.socket.UserInfo";
  }
  protected:
  explicit UserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kJwtFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string jwt = 3;
  void clear_jwt();
  const std::string& jwt() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_jwt(ArgT0&& arg0, ArgT... args);
  std::string* mutable_jwt();
  PROTOBUF_NODISCARD std::string* release_jwt();
  void set_allocated_jwt(std::string* jwt);
  private:
  const std::string& _internal_jwt() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_jwt(const std::string& value);
  std::string* _internal_mutable_jwt();
  public:

  // int64 id = 1;
  void clear_id();
  int64_t id() const;
  void set_id(int64_t value);
  private:
  int64_t _internal_id() const;
  void _internal_set_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:pb.socket.UserInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr jwt_;
    int64_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_socket_2eproto;
};
// -------------------------------------------------------------------

class ExternalMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.socket.ExternalMessage) */ {
 public:
  inline ExternalMessage() : ExternalMessage(nullptr) {}
  ~ExternalMessage() override;
  explicit PROTOBUF_CONSTEXPR ExternalMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExternalMessage(const ExternalMessage& from);
  ExternalMessage(ExternalMessage&& from) noexcept
    : ExternalMessage() {
    *this = ::std::move(from);
  }

  inline ExternalMessage& operator=(const ExternalMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExternalMessage& operator=(ExternalMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExternalMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExternalMessage* internal_default_instance() {
    return reinterpret_cast<const ExternalMessage*>(
               &_ExternalMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ExternalMessage& a, ExternalMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ExternalMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExternalMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExternalMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExternalMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExternalMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ExternalMessage& from) {
    ExternalMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExternalMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.socket.ExternalMessage";
  }
  protected:
  explicit ExternalMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValidMsgFieldNumber = 5,
    kDataFieldNumber = 6,
    kCmdCodeFieldNumber = 1,
    kProtocolSwitchFieldNumber = 2,
    kCmdMergeFieldNumber = 3,
    kResponseStatusFieldNumber = 4,
  };
  // string validMsg = 5;
  void clear_validmsg();
  const std::string& validmsg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_validmsg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_validmsg();
  PROTOBUF_NODISCARD std::string* release_validmsg();
  void set_allocated_validmsg(std::string* validmsg);
  private:
  const std::string& _internal_validmsg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_validmsg(const std::string& value);
  std::string* _internal_mutable_validmsg();
  public:

  // bytes data = 6;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // int32 cmdCode = 1;
  void clear_cmdcode();
  int32_t cmdcode() const;
  void set_cmdcode(int32_t value);
  private:
  int32_t _internal_cmdcode() const;
  void _internal_set_cmdcode(int32_t value);
  public:

  // int32 protocolSwitch = 2;
  void clear_protocolswitch();
  int32_t protocolswitch() const;
  void set_protocolswitch(int32_t value);
  private:
  int32_t _internal_protocolswitch() const;
  void _internal_set_protocolswitch(int32_t value);
  public:

  // int32 cmdMerge = 3;
  void clear_cmdmerge();
  int32_t cmdmerge() const;
  void set_cmdmerge(int32_t value);
  private:
  int32_t _internal_cmdmerge() const;
  void _internal_set_cmdmerge(int32_t value);
  public:

  // int32 responseStatus = 4;
  void clear_responsestatus();
  int32_t responsestatus() const;
  void set_responsestatus(int32_t value);
  private:
  int32_t _internal_responsestatus() const;
  void _internal_set_responsestatus(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:pb.socket.ExternalMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr validmsg_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    int32_t cmdcode_;
    int32_t protocolswitch_;
    int32_t cmdmerge_;
    int32_t responsestatus_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_socket_2eproto;
};
// -------------------------------------------------------------------

class HelloSpringMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.socket.HelloSpringMsg) */ {
 public:
  inline HelloSpringMsg() : HelloSpringMsg(nullptr) {}
  ~HelloSpringMsg() override;
  explicit PROTOBUF_CONSTEXPR HelloSpringMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HelloSpringMsg(const HelloSpringMsg& from);
  HelloSpringMsg(HelloSpringMsg&& from) noexcept
    : HelloSpringMsg() {
    *this = ::std::move(from);
  }

  inline HelloSpringMsg& operator=(const HelloSpringMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline HelloSpringMsg& operator=(HelloSpringMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HelloSpringMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const HelloSpringMsg* internal_default_instance() {
    return reinterpret_cast<const HelloSpringMsg*>(
               &_HelloSpringMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(HelloSpringMsg& a, HelloSpringMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(HelloSpringMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HelloSpringMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HelloSpringMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HelloSpringMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HelloSpringMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HelloSpringMsg& from) {
    HelloSpringMsg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HelloSpringMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.socket.HelloSpringMsg";
  }
  protected:
  explicit HelloSpringMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:pb.socket.HelloSpringMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_socket_2eproto;
};
// -------------------------------------------------------------------

class DemoLoginVerify final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.socket.DemoLoginVerify) */ {
 public:
  inline DemoLoginVerify() : DemoLoginVerify(nullptr) {}
  ~DemoLoginVerify() override;
  explicit PROTOBUF_CONSTEXPR DemoLoginVerify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DemoLoginVerify(const DemoLoginVerify& from);
  DemoLoginVerify(DemoLoginVerify&& from) noexcept
    : DemoLoginVerify() {
    *this = ::std::move(from);
  }

  inline DemoLoginVerify& operator=(const DemoLoginVerify& from) {
    CopyFrom(from);
    return *this;
  }
  inline DemoLoginVerify& operator=(DemoLoginVerify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DemoLoginVerify& default_instance() {
    return *internal_default_instance();
  }
  static inline const DemoLoginVerify* internal_default_instance() {
    return reinterpret_cast<const DemoLoginVerify*>(
               &_DemoLoginVerify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DemoLoginVerify& a, DemoLoginVerify& b) {
    a.Swap(&b);
  }
  inline void Swap(DemoLoginVerify* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DemoLoginVerify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DemoLoginVerify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DemoLoginVerify>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DemoLoginVerify& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DemoLoginVerify& from) {
    DemoLoginVerify::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DemoLoginVerify* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.socket.DemoLoginVerify";
  }
  protected:
  explicit DemoLoginVerify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJwtFieldNumber = 1,
  };
  // string jwt = 1;
  void clear_jwt();
  const std::string& jwt() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_jwt(ArgT0&& arg0, ArgT... args);
  std::string* mutable_jwt();
  PROTOBUF_NODISCARD std::string* release_jwt();
  void set_allocated_jwt(std::string* jwt);
  private:
  const std::string& _internal_jwt() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_jwt(const std::string& value);
  std::string* _internal_mutable_jwt();
  public:

  // @@protoc_insertion_point(class_scope:pb.socket.DemoLoginVerify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr jwt_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_socket_2eproto;
};
// -------------------------------------------------------------------

class UserLogin final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.socket.UserLogin) */ {
 public:
  inline UserLogin() : UserLogin(nullptr) {}
  ~UserLogin() override;
  explicit PROTOBUF_CONSTEXPR UserLogin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserLogin(const UserLogin& from);
  UserLogin(UserLogin&& from) noexcept
    : UserLogin() {
    *this = ::std::move(from);
  }

  inline UserLogin& operator=(const UserLogin& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserLogin& operator=(UserLogin&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserLogin& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserLogin* internal_default_instance() {
    return reinterpret_cast<const UserLogin*>(
               &_UserLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UserLogin& a, UserLogin& b) {
    a.Swap(&b);
  }
  inline void Swap(UserLogin* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserLogin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserLogin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserLogin>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserLogin& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserLogin& from) {
    UserLogin::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserLogin* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.socket.UserLogin";
  }
  protected:
  explicit UserLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:pb.socket.UserLogin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_socket_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HelloReq

// string name = 1;
inline void HelloReq::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& HelloReq::name() const {
  // @@protoc_insertion_point(field_get:pb.socket.HelloReq.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HelloReq::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.socket.HelloReq.name)
}
inline std::string* HelloReq::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:pb.socket.HelloReq.name)
  return _s;
}
inline const std::string& HelloReq::_internal_name() const {
  return _impl_.name_.Get();
}
inline void HelloReq::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* HelloReq::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* HelloReq::release_name() {
  // @@protoc_insertion_point(field_release:pb.socket.HelloReq.name)
  return _impl_.name_.Release();
}
inline void HelloReq::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.socket.HelloReq.name)
}

// -------------------------------------------------------------------

// UserInfo

// int64 id = 1;
inline void UserInfo::clear_id() {
  _impl_.id_ = int64_t{0};
}
inline int64_t UserInfo::_internal_id() const {
  return _impl_.id_;
}
inline int64_t UserInfo::id() const {
  // @@protoc_insertion_point(field_get:pb.socket.UserInfo.id)
  return _internal_id();
}
inline void UserInfo::_internal_set_id(int64_t value) {
  
  _impl_.id_ = value;
}
inline void UserInfo::set_id(int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pb.socket.UserInfo.id)
}

// string name = 2;
inline void UserInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& UserInfo::name() const {
  // @@protoc_insertion_point(field_get:pb.socket.UserInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.socket.UserInfo.name)
}
inline std::string* UserInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:pb.socket.UserInfo.name)
  return _s;
}
inline const std::string& UserInfo::_internal_name() const {
  return _impl_.name_.Get();
}
inline void UserInfo::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* UserInfo::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* UserInfo::release_name() {
  // @@protoc_insertion_point(field_release:pb.socket.UserInfo.name)
  return _impl_.name_.Release();
}
inline void UserInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.socket.UserInfo.name)
}

// string jwt = 3;
inline void UserInfo::clear_jwt() {
  _impl_.jwt_.ClearToEmpty();
}
inline const std::string& UserInfo::jwt() const {
  // @@protoc_insertion_point(field_get:pb.socket.UserInfo.jwt)
  return _internal_jwt();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserInfo::set_jwt(ArgT0&& arg0, ArgT... args) {
 
 _impl_.jwt_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.socket.UserInfo.jwt)
}
inline std::string* UserInfo::mutable_jwt() {
  std::string* _s = _internal_mutable_jwt();
  // @@protoc_insertion_point(field_mutable:pb.socket.UserInfo.jwt)
  return _s;
}
inline const std::string& UserInfo::_internal_jwt() const {
  return _impl_.jwt_.Get();
}
inline void UserInfo::_internal_set_jwt(const std::string& value) {
  
  _impl_.jwt_.Set(value, GetArenaForAllocation());
}
inline std::string* UserInfo::_internal_mutable_jwt() {
  
  return _impl_.jwt_.Mutable(GetArenaForAllocation());
}
inline std::string* UserInfo::release_jwt() {
  // @@protoc_insertion_point(field_release:pb.socket.UserInfo.jwt)
  return _impl_.jwt_.Release();
}
inline void UserInfo::set_allocated_jwt(std::string* jwt) {
  if (jwt != nullptr) {
    
  } else {
    
  }
  _impl_.jwt_.SetAllocated(jwt, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.jwt_.IsDefault()) {
    _impl_.jwt_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.socket.UserInfo.jwt)
}

// -------------------------------------------------------------------

// ExternalMessage

// int32 cmdCode = 1;
inline void ExternalMessage::clear_cmdcode() {
  _impl_.cmdcode_ = 0;
}
inline int32_t ExternalMessage::_internal_cmdcode() const {
  return _impl_.cmdcode_;
}
inline int32_t ExternalMessage::cmdcode() const {
  // @@protoc_insertion_point(field_get:pb.socket.ExternalMessage.cmdCode)
  return _internal_cmdcode();
}
inline void ExternalMessage::_internal_set_cmdcode(int32_t value) {
  
  _impl_.cmdcode_ = value;
}
inline void ExternalMessage::set_cmdcode(int32_t value) {
  _internal_set_cmdcode(value);
  // @@protoc_insertion_point(field_set:pb.socket.ExternalMessage.cmdCode)
}

// int32 protocolSwitch = 2;
inline void ExternalMessage::clear_protocolswitch() {
  _impl_.protocolswitch_ = 0;
}
inline int32_t ExternalMessage::_internal_protocolswitch() const {
  return _impl_.protocolswitch_;
}
inline int32_t ExternalMessage::protocolswitch() const {
  // @@protoc_insertion_point(field_get:pb.socket.ExternalMessage.protocolSwitch)
  return _internal_protocolswitch();
}
inline void ExternalMessage::_internal_set_protocolswitch(int32_t value) {
  
  _impl_.protocolswitch_ = value;
}
inline void ExternalMessage::set_protocolswitch(int32_t value) {
  _internal_set_protocolswitch(value);
  // @@protoc_insertion_point(field_set:pb.socket.ExternalMessage.protocolSwitch)
}

// int32 cmdMerge = 3;
inline void ExternalMessage::clear_cmdmerge() {
  _impl_.cmdmerge_ = 0;
}
inline int32_t ExternalMessage::_internal_cmdmerge() const {
  return _impl_.cmdmerge_;
}
inline int32_t ExternalMessage::cmdmerge() const {
  // @@protoc_insertion_point(field_get:pb.socket.ExternalMessage.cmdMerge)
  return _internal_cmdmerge();
}
inline void ExternalMessage::_internal_set_cmdmerge(int32_t value) {
  
  _impl_.cmdmerge_ = value;
}
inline void ExternalMessage::set_cmdmerge(int32_t value) {
  _internal_set_cmdmerge(value);
  // @@protoc_insertion_point(field_set:pb.socket.ExternalMessage.cmdMerge)
}

// int32 responseStatus = 4;
inline void ExternalMessage::clear_responsestatus() {
  _impl_.responsestatus_ = 0;
}
inline int32_t ExternalMessage::_internal_responsestatus() const {
  return _impl_.responsestatus_;
}
inline int32_t ExternalMessage::responsestatus() const {
  // @@protoc_insertion_point(field_get:pb.socket.ExternalMessage.responseStatus)
  return _internal_responsestatus();
}
inline void ExternalMessage::_internal_set_responsestatus(int32_t value) {
  
  _impl_.responsestatus_ = value;
}
inline void ExternalMessage::set_responsestatus(int32_t value) {
  _internal_set_responsestatus(value);
  // @@protoc_insertion_point(field_set:pb.socket.ExternalMessage.responseStatus)
}

// string validMsg = 5;
inline void ExternalMessage::clear_validmsg() {
  _impl_.validmsg_.ClearToEmpty();
}
inline const std::string& ExternalMessage::validmsg() const {
  // @@protoc_insertion_point(field_get:pb.socket.ExternalMessage.validMsg)
  return _internal_validmsg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExternalMessage::set_validmsg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.validmsg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.socket.ExternalMessage.validMsg)
}
inline std::string* ExternalMessage::mutable_validmsg() {
  std::string* _s = _internal_mutable_validmsg();
  // @@protoc_insertion_point(field_mutable:pb.socket.ExternalMessage.validMsg)
  return _s;
}
inline const std::string& ExternalMessage::_internal_validmsg() const {
  return _impl_.validmsg_.Get();
}
inline void ExternalMessage::_internal_set_validmsg(const std::string& value) {
  
  _impl_.validmsg_.Set(value, GetArenaForAllocation());
}
inline std::string* ExternalMessage::_internal_mutable_validmsg() {
  
  return _impl_.validmsg_.Mutable(GetArenaForAllocation());
}
inline std::string* ExternalMessage::release_validmsg() {
  // @@protoc_insertion_point(field_release:pb.socket.ExternalMessage.validMsg)
  return _impl_.validmsg_.Release();
}
inline void ExternalMessage::set_allocated_validmsg(std::string* validmsg) {
  if (validmsg != nullptr) {
    
  } else {
    
  }
  _impl_.validmsg_.SetAllocated(validmsg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.validmsg_.IsDefault()) {
    _impl_.validmsg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.socket.ExternalMessage.validMsg)
}

// bytes data = 6;
inline void ExternalMessage::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& ExternalMessage::data() const {
  // @@protoc_insertion_point(field_get:pb.socket.ExternalMessage.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExternalMessage::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.socket.ExternalMessage.data)
}
inline std::string* ExternalMessage::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:pb.socket.ExternalMessage.data)
  return _s;
}
inline const std::string& ExternalMessage::_internal_data() const {
  return _impl_.data_.Get();
}
inline void ExternalMessage::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* ExternalMessage::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* ExternalMessage::release_data() {
  // @@protoc_insertion_point(field_release:pb.socket.ExternalMessage.data)
  return _impl_.data_.Release();
}
inline void ExternalMessage::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.socket.ExternalMessage.data)
}

// -------------------------------------------------------------------

// HelloSpringMsg

// string name = 1;
inline void HelloSpringMsg::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& HelloSpringMsg::name() const {
  // @@protoc_insertion_point(field_get:pb.socket.HelloSpringMsg.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HelloSpringMsg::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.socket.HelloSpringMsg.name)
}
inline std::string* HelloSpringMsg::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:pb.socket.HelloSpringMsg.name)
  return _s;
}
inline const std::string& HelloSpringMsg::_internal_name() const {
  return _impl_.name_.Get();
}
inline void HelloSpringMsg::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* HelloSpringMsg::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* HelloSpringMsg::release_name() {
  // @@protoc_insertion_point(field_release:pb.socket.HelloSpringMsg.name)
  return _impl_.name_.Release();
}
inline void HelloSpringMsg::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.socket.HelloSpringMsg.name)
}

// -------------------------------------------------------------------

// DemoLoginVerify

// string jwt = 1;
inline void DemoLoginVerify::clear_jwt() {
  _impl_.jwt_.ClearToEmpty();
}
inline const std::string& DemoLoginVerify::jwt() const {
  // @@protoc_insertion_point(field_get:pb.socket.DemoLoginVerify.jwt)
  return _internal_jwt();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DemoLoginVerify::set_jwt(ArgT0&& arg0, ArgT... args) {
 
 _impl_.jwt_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.socket.DemoLoginVerify.jwt)
}
inline std::string* DemoLoginVerify::mutable_jwt() {
  std::string* _s = _internal_mutable_jwt();
  // @@protoc_insertion_point(field_mutable:pb.socket.DemoLoginVerify.jwt)
  return _s;
}
inline const std::string& DemoLoginVerify::_internal_jwt() const {
  return _impl_.jwt_.Get();
}
inline void DemoLoginVerify::_internal_set_jwt(const std::string& value) {
  
  _impl_.jwt_.Set(value, GetArenaForAllocation());
}
inline std::string* DemoLoginVerify::_internal_mutable_jwt() {
  
  return _impl_.jwt_.Mutable(GetArenaForAllocation());
}
inline std::string* DemoLoginVerify::release_jwt() {
  // @@protoc_insertion_point(field_release:pb.socket.DemoLoginVerify.jwt)
  return _impl_.jwt_.Release();
}
inline void DemoLoginVerify::set_allocated_jwt(std::string* jwt) {
  if (jwt != nullptr) {
    
  } else {
    
  }
  _impl_.jwt_.SetAllocated(jwt, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.jwt_.IsDefault()) {
    _impl_.jwt_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.socket.DemoLoginVerify.jwt)
}

// -------------------------------------------------------------------

// UserLogin

// string username = 1;
inline void UserLogin::clear_username() {
  _impl_.username_.ClearToEmpty();
}
inline const std::string& UserLogin::username() const {
  // @@protoc_insertion_point(field_get:pb.socket.UserLogin.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserLogin::set_username(ArgT0&& arg0, ArgT... args) {
 
 _impl_.username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.socket.UserLogin.username)
}
inline std::string* UserLogin::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:pb.socket.UserLogin.username)
  return _s;
}
inline const std::string& UserLogin::_internal_username() const {
  return _impl_.username_.Get();
}
inline void UserLogin::_internal_set_username(const std::string& value) {
  
  _impl_.username_.Set(value, GetArenaForAllocation());
}
inline std::string* UserLogin::_internal_mutable_username() {
  
  return _impl_.username_.Mutable(GetArenaForAllocation());
}
inline std::string* UserLogin::release_username() {
  // @@protoc_insertion_point(field_release:pb.socket.UserLogin.username)
  return _impl_.username_.Release();
}
inline void UserLogin::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  _impl_.username_.SetAllocated(username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.socket.UserLogin.username)
}

// string password = 2;
inline void UserLogin::clear_password() {
  _impl_.password_.ClearToEmpty();
}
inline const std::string& UserLogin::password() const {
  // @@protoc_insertion_point(field_get:pb.socket.UserLogin.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserLogin::set_password(ArgT0&& arg0, ArgT... args) {
 
 _impl_.password_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.socket.UserLogin.password)
}
inline std::string* UserLogin::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:pb.socket.UserLogin.password)
  return _s;
}
inline const std::string& UserLogin::_internal_password() const {
  return _impl_.password_.Get();
}
inline void UserLogin::_internal_set_password(const std::string& value) {
  
  _impl_.password_.Set(value, GetArenaForAllocation());
}
inline std::string* UserLogin::_internal_mutable_password() {
  
  return _impl_.password_.Mutable(GetArenaForAllocation());
}
inline std::string* UserLogin::release_password() {
  // @@protoc_insertion_point(field_release:pb.socket.UserLogin.password)
  return _impl_.password_.Release();
}
inline void UserLogin::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  _impl_.password_.SetAllocated(password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.socket.UserLogin.password)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace socket
}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_socket_2eproto
